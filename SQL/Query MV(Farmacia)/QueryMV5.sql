


CREATE OR REPLACE PACKAGE DBAMV.PKG_MGES_MANUTENCAO_SALDO IS
PROCEDURE PRC_CORRIGE_KIT_ATIVO;
PROCEDURE PRC_CORRIGE_SALDO_MESTRE;
PROCEDURE PRC_CORRIGE_SALDO_KIT;
PROCEDURE PRC_SINCRONIZA_EST_PRO;
PROCEDURE PRC_CORRIGE_RESERVA_S_KIT;
PROCEDURE PRC_CORRIGE_RESERVA_KIT;
PROCEDURE PRC_PROCESSAMENTO_KITS;
FUNCTION FNC_RETORNA_KIT_ATIVO(P_DSP_CD_BARRAS VARCHAR2,P_CD_ESTOQUE NUMBER) RETURN NUMBER;
FUNCTION FNC_RETORNA_KIT_ATIVO_MVTO(P_DSP_CD_BARRAS VARCHAR2,
                                                      P_CD_MVTO_ESTOQUE NUMBER,
                                                      P_CD_ESTOQUE NUMBER) RETURN NUMBER;
END;
/
CREATE OR REPLACE PACKAGE BODY DBAMV.PKG_MGES_MANUTENCAO_SALDO IS
FUNCTION FNC_RETORNA_KIT_ATIVO_MVTO(P_DSP_CD_BARRAS VARCHAR2,
                                                      P_CD_MVTO_ESTOQUE NUMBER,
                                                      P_CD_ESTOQUE NUMBER) RETURN NUMBER
IS
CURSOR C_KIT_PRODUZIDO IS
SELECT IMKP.CD_PRODUTO,
       IMKP.CD_LOTE,
       IMKP.DT_VALIDADE,
       SUM(IMKP.QT_MOVIMENTACAO * UP.VL_FATOR) AS QT_MOVIMENTACAO,
       TO_CHAR(MKP.DSP_CD_BARRAS) AS DSP_CD_BARRAS,
       MKP.CD_KIT,
       MKP.CD_FORMULA
   FROM DBAMV.MVTO_KIT_PRODUZIDO MKP,
        DBAMV.ITMVTO_KIT_PRODUZIDO IMKP,
        DBAMV.UNI_PRO UP
WHERE MKP.CD_MVTO_ESTOQUE = IMKP.CD_MVTO_ESTOQUE
AND IMKP.CD_UNI_PRO = UP.CD_UNI_PRO
AND MKP.CD_MVTO_ESTOQUE = (SELECT MAX(MKP_2.CD_MVTO_ESTOQUE) AS CD_MVTO_ESTOQUE
                             FROM DBAMV.MVTO_KIT_PRODUZIDO MKP_2
                            WHERE MKP_2.DSP_CD_BARRAS = MKP.DSP_CD_BARRAS
                            AND  MKP_2.DSP_CD_BARRAS = To_Number(P_DSP_CD_BARRAS)
                            AND NVL(MKP_2.CD_ESTOQUE_DESTINO,MKP_2.CD_ESTOQUE) = P_CD_ESTOQUE
                           )
AND MKP.DSP_CD_BARRAS = To_Number(P_DSP_CD_BARRAS)
AND NVL(MKP.CD_ESTOQUE_DESTINO,MKP.CD_ESTOQUE) = P_CD_ESTOQUE
GROUP BY IMKP.CD_PRODUTO,
         IMKP.CD_LOTE,
         IMKP.DT_VALIDADE,
         TO_CHAR(MKP.DSP_CD_BARRAS),
         MKP.CD_KIT,
         MKP.CD_FORMULA;

CURSOR C_KIT_MVTO(P_DSP_CD_BARRAS VARCHAR,
                  P_CD_PRODUTO NUMBER,
                  P_CD_LOTE VARCHAR2,
                  P_DT_VALIDADE DATE,
                  P_QT_MOVIMENTACAO NUMBER) IS
SELECT 1 AS QT_KIT
         FROM DBAMV.MVTO_ESTOQUE M,
              DBAMV.ITMVTO_ESTOQUE I,
              DBAMV.UNI_PRO UP
WHERE M.CD_MVTO_ESTOQUE = I.CD_MVTO_ESTOQUE
AND I.CD_UNI_PRO = UP.CD_UNI_PRO
AND I.CD_PRODUTO = P_CD_PRODUTO
AND M.CD_ESTOQUE = P_CD_ESTOQUE
AND M.CD_MVTO_ESTOQUE = P_CD_MVTO_ESTOQUE
AND NVL(I.CD_LOTE,'@MV12321VM@') = NVL(P_CD_LOTE,'@MV12321VM@')
AND NVL(I.DT_VALIDADE,TRUNC(SYSDATE)) = NVL(P_DT_VALIDADE,TRUNC(SYSDATE))
AND I.DSP_CODIGO_DE_BARRAS = P_DSP_CD_BARRAS
AND (I.QT_MOVIMENTACAO * UP.VL_FATOR) =P_QT_MOVIMENTACAO ;
V_QT_MOVIMENTACAO NUMBER;
V_KIT_COMPLETO BOOLEAN := TRUE;
BEGIN
   FOR R IN C_KIT_PRODUZIDO LOOP
       V_QT_MOVIMENTACAO := 0;
       OPEN C_KIT_MVTO(R.DSP_CD_BARRAS,R.CD_PRODUTO,R.CD_LOTE,R.DT_VALIDADE,R.QT_MOVIMENTACAO);
       FETCH C_KIT_MVTO INTO V_QT_MOVIMENTACAO;
       CLOSE C_KIT_MVTO;

       IF V_QT_MOVIMENTACAO = 0 OR V_QT_MOVIMENTACAO IS NULL THEN
            V_KIT_COMPLETO := FALSE;
       END IF;
   END LOOP;

   IF V_KIT_COMPLETO THEN
   RETURN 1;
   ELSE
   RETURN 0;
   END IF;


--EXCEPTION
--  WHEN OTHERS THEN
END;
FUNCTION FNC_RETORNA_KIT_ATIVO(P_DSP_CD_BARRAS VARCHAR2,P_CD_ESTOQUE NUMBER) RETURN NUMBER
IS
CURSOR C_KIT_MVTO IS
SELECT SUM(QT_MOVIMENTACAO * DECODE(TP_MVTO_ESTOQUE,'C',FNC_RETORNA_KIT_ATIVO_MVTO(P_DSP_CD_BARRAS,CD_MVTO_ESTOQUE,P_CD_ESTOQUE),'D',FNC_RETORNA_KIT_ATIVO_MVTO(P_DSP_CD_BARRAS,CD_MVTO_ESTOQUE,P_CD_ESTOQUE),'PRODUCAO',1,'TE',1,-1)) AS QT_MOVIMENTAO
FROM (
SELECT DISTINCT M.TP_MVTO_ESTOQUE,
                1 QT_MOVIMENTACAO,
                M.CD_MVTO_ESTOQUE
FROM DBAMV.MVTO_ESTOQUE M,
     DBAMV.ITMVTO_ESTOQUE I
WHERE I.CD_MVTO_ESTOQUE = M.CD_MVTO_ESTOQUE
AND I.DSP_CODIGO_DE_BARRAS = P_DSP_CD_BARRAS
AND M.CD_ESTOQUE= P_CD_ESTOQUE
UNION ALL
SELECT DISTINCT 'PRODUCAO' AS TP_MVTO_ESTOQUE,
        1 AS QT_MOVIMENTACAO,
        1 AS CD_MVTO_ESTOQUE
FROM DBAMV.MVTO_KIT_PRODUZIDO M
WHERE M.DSP_CD_BARRAS = To_Number(P_DSP_CD_BARRAS)
AND M.CD_ESTOQUE = P_CD_ESTOQUE
AND ROWNUM = 1
UNION ALL
SELECT DISTINCT 'TE' AS TP_MVTO_ESTOQUE,
                1 QT_MOVIMENTACAO,
                M.CD_MVTO_ESTOQUE
FROM DBAMV.MVTO_ESTOQUE M,
     DBAMV.ITMVTO_ESTOQUE I
WHERE I.CD_MVTO_ESTOQUE = M.CD_MVTO_ESTOQUE
AND I.DSP_CODIGO_DE_BARRAS = P_DSP_CD_BARRAS
AND M.TP_MVTO_ESTOQUE = 'T'
AND M.CD_ESTOQUE_DESTINO= P_CD_ESTOQUE

);
V_QT_MOVIMENTACAO NUMBER;
BEGIN
   OPEN C_KIT_MVTO;
   FETCH C_KIT_MVTO INTO V_QT_MOVIMENTACAO;
   CLOSE C_KIT_MVTO;

   RETURN NVL(V_QT_MOVIMENTACAO,0);
--EXCEPTION
--  WHEN OTHERS THEN
END;


FUNCTION FNC_MGES_RETORNA_ULT_CONTAGEM
(P_CD_ESTOQUE NUMBER,
 P_CD_PRODUTO NUMBER
) RETURN NUMBER IS
CURSOR C_ULTIMA_CONTAGEM IS
SELECT CT.CD_CONTAGEM
FROM DBAMV.CONTAGEM CT,
     DBAMV.ITCONTAGEM IT
WHERE CT.CD_CONTAGEM = IT.CD_CONTAGEM
AND CT.CD_ESTOQUE = P_CD_ESTOQUE
AND IT.CD_PRODUTO = P_CD_PRODUTO
AND CT.TP_CONTAGEM IN ('G','S')
AND TRUNC(CT.DT_GERACAO) + (CT.HR_GERACAO - TRUNC(CT.HR_GERACAO)) = (SELECT MAX(TRUNC(C.DT_GERACAO) + (C.HR_GERACAO - TRUNC(C.HR_GERACAO)))
                        FROM DBAMV.CONTAGEM C,
                             DBAMV.ITCONTAGEM I
                      WHERE C.CD_CONTAGEM = I.CD_CONTAGEM
                      AND I.CD_PRODUTO = IT.CD_PRODUTO
                      AND C.CD_ESTOQUE = CT.CD_ESTOQUE
                      AND C.TP_CONTAGEM IN ('G','S')
                     );
V_CD_CONTAGEM NUMBER;
BEGIN
  OPEN C_ULTIMA_CONTAGEM;
  FETCH C_ULTIMA_CONTAGEM INTO V_CD_CONTAGEM;
  CLOSE C_ULTIMA_CONTAGEM;
  RETURN  V_CD_CONTAGEM;
END;
PROCEDURE PRC_CORRIGE_KIT_ATIVO IS
CURSOR C_CONTA_KIT IS
SELECT DISTINCT
   M.CD_KIT,
   NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE) AS CD_ESTOQUE
FROM
   DBAMV.MVTO_KIT_PRODUZIDO M,
   DBAMV.ESTOQUE E
WHERE
   M.SN_KIT_ARMAZENADO = 'S'
   AND Nvl(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE) = E.CD_ESTOQUE
   AND E.CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA
ORDER BY NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE),M.CD_KIT;

CURSOR C_KIT_ESTOQUE(P_CD_KIT NUMBER,P_CD_ESTOQUE NUMBER) IS
SELECT
CD_MVTO_ESTOQUE,
NVL(CD_ESTOQUE_DESTINO,CD_ESTOQUE) AS CD_ESTOQUE,
CD_KIT,
DSP_CD_BARRAS,
SN_KIT_ARMAZENADO,
CD_FORMULA ,
FNC_RETORNA_KIT_ATIVO(DSP_CD_BARRAS, NVL(CD_ESTOQUE_DESTINO,CD_ESTOQUE)) AS QTD_KIT
FROM MVTO_KIT_PRODUZIDO
WHERE SN_KIT_ARMAZENADO = 'S'
AND CD_KIT = P_CD_KIT
AND NVL(CD_ESTOQUE_DESTINO,CD_ESTOQUE) = P_CD_ESTOQUE
ORDER BY NVL(CD_ESTOQUE_DESTINO,CD_ESTOQUE);

BEGIN
  FOR R IN C_CONTA_KIT LOOP
       FOR L IN C_KIT_ESTOQUE(R.CD_KIT,R.CD_ESTOQUE) LOOP
           IF L.QTD_KIT = 0 THEN
              UPDATE DBAMV.MVTO_KIT_PRODUZIDO SET SN_KIT_ARMAZENADO = 'N', DS_OBS_EMPRESTIMO = 'INATIVADO POR MOVIMENTACAO'

              WHERE CD_MVTO_ESTOQUE = L.CD_MVTO_ESTOQUE;
           ELSIF L.QTD_KIT < 0 THEN
                  UPDATE DBAMV.MVTO_KIT_PRODUZIDO SET SN_KIT_ARMAZENADO = 'N' ,DS_OBS_EMPRESTIMO = 'INATIVADO POR MOVIMENTACAO'
                  WHERE CD_MVTO_ESTOQUE = L.CD_MVTO_ESTOQUE;

           END IF;
       END LOOP;
  END LOOP;
--EXCEPTION
--  WHEN OTHERS THEN
END;

/**
** ESSA PROCEDURE CONSULTA TODOS OS KITS PRODUZIDOS E ATIVOS,
** COMPARA COM O SALDO DA EST_PRO E CASO O SALDO NAO BATA
** AJUSTA: O AJUSTE SERÀ REALIZADO DE ACORDO COM A SITUACAO
** POR EXEMPLO: SE O KIT EXISTIR NA EST_PRO SERA REALIZADO UM UPDATE,
** SE NÂO EXISTIR SERÀ REALIZADO UM INSERT
*/
PROCEDURE PRC_CORRIGE_SALDO_KIT IS
CURSOR C_KIT_ESTOQUE IS
SELECT * FROM (
SELECT
   COUNT(M.CD_MVTO_ESTOQUE) AS QUANTIDADE_EM_ESTOQUE,
   (
      SELECT
         NVL(E.QT_ESTOQUE_ATUAL,0)
      FROM
         DBAMV.EST_PRO E
      WHERE
         E.CD_PRODUTO = M.CD_KIT
         AND E.CD_ESTOQUE = NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE)
   )
   AS QT_ESTOQUE,
   M.CD_KIT,
   NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE) AS CD_ESTOQUE
FROM
   DBAMV.MVTO_KIT_PRODUZIDO M,
   DBAMV.ESTOQUE E
WHERE
   M.SN_KIT_ARMAZENADO = 'S'
   AND M.CD_KIT IS NOT NULL 
   AND NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE) =  E.CD_ESTOQUE
   AND E.CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA
GROUP BY
   M.CD_KIT,
   NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE)
) WHERE QUANTIDADE_EM_ESTOQUE <> Nvl(QT_ESTOQUE,0) ;
BEGIN
   FOR R IN C_KIT_ESTOQUE LOOP
   IF R.QT_ESTOQUE IS NOT NULL THEN
   UPDATE
      DBAMV.EST_PRO
   SET
      QT_ESTOQUE_ATUAL = R.QUANTIDADE_EM_ESTOQUE
   WHERE
      CD_PRODUTO = R.CD_KIT
      AND CD_ESTOQUE = R.CD_ESTOQUE;
   ELSE
       INSERT INTO DBAMV.EST_PRO(CD_PRODUTO,CD_ESTOQUE,QT_ESTOQUE_ATUAL)
       VALUES (R.CD_KIT,R.CD_ESTOQUE,R.QUANTIDADE_EM_ESTOQUE);
   END IF;
END
LOOP;
END;

PROCEDURE PRC_CORRIGE_SALDO_MESTRE IS
CURSOR C_FILHO_SEM_MESTRE IS
SELECT LP.*,
       PROD.CD_PRODUTO_TEM
   FROM DBAMV.LOT_PRO LP,
        DBAMV.ESTOQUE E,
        DBAMV.PRODUTO PROD
WHERE LP.CD_PRODUTO = PROD.CD_PRODUTO
AND LP.CD_ESTOQUE = E.CD_ESTOQUE
AND E.CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA
AND PROD.CD_PRODUTO_TEM IS NOT NULL
AND NOT EXISTS
(SELECT 1 FROM
   DBAMV.LOT_PRO L
 WHERE L.CD_PRODUTO = PROD.CD_PRODUTO_TEM
 AND L.CD_ESTOQUE = LP.CD_ESTOQUE
  AND NVL(L.CD_LOTE,'@MV123V321VM@') = NVL(LP.CD_LOTE,'@MV123V321VM@')
  AND NVL(L.DT_VALIDADE,TRUNC(SYSDATE)) = NVL(LP.DT_VALIDADE,TRUNC(SYSDATE))
 ) ;

CURSOR C_SALDO_MESTRE IS
SELECT * FROM (
SELECT LP.CD_LOT_PRO,
       LP.CD_ESTOQUE,
       LP.CD_PRODUTO,
       LP.CD_LOTE,
       LP.DT_VALIDADE,
       LP.QT_ESTOQUE_ATUAL,
       NVL((SELECT SUM(L.QT_ESTOQUE_ATUAL)
           FROM DBAMV.LOT_PRO L,
                DBAMV.PRODUTO P
         WHERE L.CD_PRODUTO = P.CD_PRODUTO
         AND P.CD_PRODUTO_TEM = PROD.CD_PRODUTO
         AND L.CD_ESTOQUE = LP.CD_ESTOQUE
         AND NVL(L.CD_LOTE,'@MV123V321VM@') = NVL(LP.CD_LOTE,'@MV123V321VM@')
         AND NVL(L.DT_VALIDADE,TRUNC(SYSDATE)) = NVL(LP.DT_VALIDADE,TRUNC(SYSDATE))
       ),0) AS QT_ESTOQUE_SOMA_FILHO,
       NVL((SELECT SUM(L.QT_KIT)
           FROM DBAMV.LOT_PRO L,
                DBAMV.PRODUTO P
         WHERE L.CD_PRODUTO = P.CD_PRODUTO
         AND P.CD_PRODUTO_TEM = PROD.CD_PRODUTO
         AND L.CD_ESTOQUE = LP.CD_ESTOQUE
         AND NVL(L.CD_LOTE,'@MV123V321VM@') = NVL(LP.CD_LOTE,'@MV123V321VM@')
         AND NVL(L.DT_VALIDADE,TRUNC(SYSDATE)) = NVL(LP.DT_VALIDADE,TRUNC(SYSDATE))
       ),0) AS QT_ESTOQUE_SOMA_KIT
  FROM DBAMV.LOT_PRO LP,
       DBAMV.PRODUTO PROD,
       DBAMV.ESTOQUE E
WHERE LP.CD_PRODUTO = PROD.CD_PRODUTO
AND LP.CD_ESTOQUE = E.CD_ESTOQUE
AND E.CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA
AND PROD.SN_MESTRE = 'S'
) WHERE QT_ESTOQUE_SOMA_FILHO <> QT_ESTOQUE_ATUAL;
BEGIN
FOR R IN C_FILHO_SEM_MESTRE LOOP
     MGES.GRAVA_LOT_PRO(
         P_CD_ESTOQUE => R.CD_ESTOQUE
        ,P_CD_PRODUTO => R.CD_PRODUTO_TEM
        ,P_DT_VALIDADE => R.DT_VALIDADE
        ,P_QTD         => R.QT_ESTOQUE_ATUAL
        ,P_CD_LOTE     => R.CD_LOTE
        ,P_DOACAO      => FALSE
        ,P_MARCA       => R.DS_MARCA
        ,P_ORCAMENTARIO => FALSE
        ,PNKIT          => R.QT_KIT
      );
END LOOP;

FOR R IN C_SALDO_MESTRE LOOP
UPDATE DBAMV.LOT_PRO SET QT_ESTOQUE_ATUAL = R.QT_ESTOQUE_SOMA_FILHO, QT_KIT = R.QT_ESTOQUE_SOMA_KIT
WHERE CD_PRODUTO = R.CD_PRODUTO
AND CD_ESTOQUE = R.CD_ESTOQUE
AND NVL(CD_LOTE,'@MV123V321VM@') = NVL(R.CD_LOTE,'@MV123V321VM@')
AND NVL(DT_VALIDADE,TRUNC(SYSDATE)) = NVL(R.DT_VALIDADE,TRUNC(SYSDATE));
END LOOP;
END;
PROCEDURE PRC_SINCRONIZA_EST_PRO IS
CURSOR C_EST_PRO IS
SELECT *
FROM (
SELECT EP.CD_PRODUTO,
       EP.CD_ESTOQUE,
       EP.QT_ESTOQUE_ATUAL,
       (SELECT SUM(NVL(LP.QT_ESTOQUE_ATUAL,0)) AS  QT_ESTOQUE_ATUAL
          FROM DBAMV.LOT_PRO LP
        WHERE LP.CD_ESTOQUE = EP.CD_ESTOQUE
             AND LP.CD_PRODUTO = EP.CD_PRODUTO) AS QT_ESTOQUE_LOTE
    FROM DBAMV.EST_PRO EP,
         DBAMV.ESTOQUE E,
         DBAMV.PRODUTO PROD
WHERE EP.CD_PRODUTO = PROD.CD_PRODUTO
      AND EP.CD_ESTOQUE = E.CD_ESTOQUE
      AND E.CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA
    AND PROD.SN_KIT = 'N'
) WHERE QT_ESTOQUE_ATUAL <> QT_ESTOQUE_LOTE;

BEGIN
FOR R IN C_EST_PRO LOOP
    UPDATE DBAMV.EST_PRO SET QT_ESTOQUE_ATUAL = R.QT_ESTOQUE_LOTE
    WHERE CD_ESTOQUE = R.CD_ESTOQUE
    AND CD_PRODUTO = R.CD_PRODUTO;
END LOOP;
END;

PROCEDURE PRC_CORRIGE_RESERVA_S_KIT IS
BEGIN
IF NVL(DBAMV.PKT_CONFIGEST.RETORNA_CAMPO('SN_CONTROLA_KIT'),'N') = 'S' THEN
  FOR R IN (SELECT * FROM (
                SELECT L.CD_LOT_PRO,
                      L.CD_ESTOQUE,
                      L.CD_PRODUTO,
                      L.CD_LOTE,
                      L.DT_VALIDADE,
                      L.QT_KIT SALDO_KIT_NA_LOTPRO,
                      (SELECT SUM(I.QT_MOVIMENTACAO * U.VL_FATOR) AS QT_KIT_PRODUZIDO
                            FROM DBAMV.ITMVTO_KIT_PRODUZIDO I,
                                DBAMV.MVTO_KIT_PRODUZIDO M,
                                DBAMV.UNI_PRO U
                            WHERE M.CD_MVTO_ESTOQUE = I.CD_MVTO_ESTOQUE
                              AND M.SN_KIT_ARMAZENADO = 'S'
                              AND NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE) = L.CD_ESTOQUE
                              AND I.CD_PRODUTO = L.CD_PRODUTO
                              AND NVL(I.CD_LOTE,'@MV12VM@') = NVL(L.CD_LOTE,'@MV12VM@')
                              AND NVL(I.DT_VALIDADE,SYSDATE) = NVL(L.DT_VALIDADE,SYSDATE)
                              AND I.CD_UNI_PRO = U.CD_UNI_PRO

                      ) AS QT_SALDO_KIT_NA_PRODUCAO
                  FROM DBAMV.LOT_PRO L,
                       DBAMV.PRODUTO P,
                       DBAMV.ESTOQUE E
                WHERE NVL(L.QT_KIT,0) > 0
                AND P.CD_PRODUTO = L.CD_PRODUTO
                AND L.CD_ESTOQUE = E.CD_ESTOQUE
                AND E.CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA
                AND P.SN_MESTRE = 'N'
                ) WHERE NVL(SALDO_KIT_NA_LOTPRO,0) <> NVL(QT_SALDO_KIT_NA_PRODUCAO,0)
                AND NVL(QT_SALDO_KIT_NA_PRODUCAO,0) = 0
                ) LOOP

           UPDATE DBAMV.LOT_PRO SET QT_KIT = 0
           WHERE CD_LOT_PRO = R.CD_LOT_PRO;
  END LOOP;
END IF;
END;
PROCEDURE PRC_CORRIGE_RESERVA_KIT IS
CURSOR C_KIT IS
SELECT * FROM (
SELECT NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE) CD_ESTOQUE,
       E.CD_MULTI_EMPRESA,
       I.CD_PRODUTO,
       I.CD_LOTE,
       I.DT_VALIDADE,
       SUM(I.QT_MOVIMENTACAO * U.VL_FATOR) QT_RESERVA_KIT,
                  (SELECT L.QT_KIT
                      FROM DBAMV.LOT_PRO L
                   WHERE L.CD_PRODUTO = I.CD_PRODUTO
                   AND L.CD_ESTOQUE = NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE)
                   AND NVL(L.CD_LOTE,'@MV-SIS1@') =  NVL(I.CD_LOTE,'@MV-SIS1@')
                   AND NVL(L.DT_VALIDADE,SYSDATE) =  NVL(I.DT_VALIDADE,SYSDATE)
                   )  AS QT_RESERVA_LOTE,
                   (SELECT L.QT_ESTOQUE_ATUAL
                      FROM DBAMV.LOT_PRO L
                   WHERE L.CD_PRODUTO = I.CD_PRODUTO
                   AND L.CD_ESTOQUE = NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE)
                   AND NVL(L.CD_LOTE,'@MV-SIS1@') =  NVL(I.CD_LOTE,'@MV-SIS1@')
                   AND NVL(L.DT_VALIDADE,SYSDATE) =  NVL(I.DT_VALIDADE,SYSDATE)
                   )  AS QT_ESTOQUE_LOTE

FROM DBAMV.MVTO_KIT_PRODUZIDO M,
     DBAMV.ITMVTO_KIT_PRODUZIDO I,
     DBAMV.UNI_PRO U,
     DBAMV.ESTOQUE E
WHERE M.CD_MVTO_ESTOQUE =   I.CD_MVTO_ESTOQUE
AND   I.CD_UNI_PRO = U.CD_UNI_PRO
AND   M.SN_KIT_ARMAZENADO = 'S'
AND NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE) = E.CD_ESTOQUE
AND E.CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA
GROUP BY NVL(M.CD_ESTOQUE_DESTINO,M.CD_ESTOQUE),
         E.CD_MULTI_EMPRESA,
         I.CD_PRODUTO,
         I.CD_LOTE,
         I.DT_VALIDADE )
WHERE QT_RESERVA_KIT <> QT_RESERVA_LOTE
ORDER BY CD_ESTOQUE;
BEGIN
IF NVL(DBAMV.PKT_CONFIGEST.RETORNA_CAMPO('SN_CONTROLA_KIT'),'N') = 'S' THEN
FOR R IN C_KIT LOOP
BEGIN
IF(R.QT_RESERVA_KIT<=R.QT_ESTOQUE_LOTE) THEN
UPDATE DBAMV.LOT_PRO SET QT_ESTOQUE_DOADO = 0, QT_KIT = R.QT_RESERVA_KIT
WHERE CD_ESTOQUE = R.CD_ESTOQUE
AND CD_PRODUTO = R.CD_PRODUTO
AND NVL(CD_LOTE,'@MV-SIS1@') =  NVL(R.CD_LOTE,'@MV-SIS1@')
AND NVL(DT_VALIDADE,SYSDATE) =  NVL(R.DT_VALIDADE,SYSDATE);
END IF;
END;
END LOOP;
END IF;
END;
PROCEDURE PRC_PROCESSAMENTO_KITS IS
BEGIN
FOR R IN (SELECT CD_MULTI_EMPRESA FROM MULTI_EMPRESAS) LOOP
  DBAMV.PKG_MV2000.ATRIBUI_EMPRESA(R.CD_MULTI_EMPRESA);
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_KIT_ATIVO;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_MESTRE;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_SINCRONIZA_EST_PRO;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_MESTRE;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_RESERVA_S_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_RESERVA_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_MESTRE;
   COMMIT;
END LOOP;
--EXCEPTION
--  WHEN OTHERS THEN
END;

END;
/

BEGIN
FOR R IN (SELECT CD_MULTI_EMPRESA FROM MULTI_EMPRESAS) LOOP
  DBAMV.PKG_MV2000.ATRIBUI_EMPRESA(R.CD_MULTI_EMPRESA);
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_KIT_ATIVO;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_MESTRE;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_SINCRONIZA_EST_PRO;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_MESTRE;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_RESERVA_S_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_RESERVA_KIT;
  DBAMV.PKG_MGES_MANUTENCAO_SALDO.PRC_CORRIGE_SALDO_MESTRE;
   COMMIT;
END LOOP;
--EXCEPTION
--  WHEN OTHERS THEN
END;

